/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    mac_Cube001_1: THREE.Mesh
    mac_Cube001_2: THREE.Mesh
    keyboard_Cube004: THREE.Mesh
    mouse_Cube010: THREE.Mesh
    Cylinder: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
    screen: THREE.MeshStandardMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/macintosh.glb') as GLTFResult
  return (
    <group 
      ref={group} 
      {...props} 
      dispose={null}         
      position={new THREE.Vector3(-2.5, -1.5, 0)}
      // rotation={[Math.PI / 0, 0, 1]}    
    >
      <group rotation={[Math.PI / 2, 0, .8]}>
        <mesh geometry={nodes.mac_Cube001_1.geometry} material={nodes.mac_Cube001_1.material} />
        <mesh geometry={nodes.mac_Cube001_2.geometry} material={materials.screen} />
      </group>
      <mesh
        geometry={nodes.keyboard_Cube004.geometry}
        material={nodes.keyboard_Cube004.material}
        rotation={[Math.PI / 2, 0, .8]}
      />
      <mesh
        geometry={nodes.mouse_Cube010.geometry}
        material={nodes.mouse_Cube010.material}
        rotation={[Math.PI / 2, 0, .8]}
      />
      <mesh geometry={nodes.Cylinder.geometry} material={nodes.Cylinder.material} rotation={[Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('/macintosh.glb')
